definitions:
  models.AlbumRegister:
    properties:
      name:
        type: string
    type: object
  models.Image:
    properties:
      description:
        type: string
      id:
        type: integer
      url:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      password:
        type: string
      username:
        type: string
    type: object
  models.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для загрузки и просмотра картинок с регистрацией
  title: Imgur 2.0 API
  version: "1.0"
paths:
  /albums:
    post:
      consumes:
      - application/json
      description: Creates an album for an authenticated user
      parameters:
      - description: Album name
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/models.AlbumRegister'
      produces:
      - application/json
      responses: {}
      summary: Create an album
      tags:
      - Albums
  /albums/{albumID}:
    delete:
      consumes:
      - application/json
      description: Deletes the specified album along with its associated images for
        an authenticated user.
      parameters:
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete an album
      tags:
      - Albums
    get:
      consumes:
      - application/json
      description: Retrieves all images from the specified album for an authenticated
        user
      parameters:
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get images from an album
      tags:
      - Albums
  /albums/{albumID}/{imageSK}:
    delete:
      consumes:
      - application/json
      description: Deletes an image by its identifier (storage key) from the album
        with the given AlbumID.
      parameters:
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: integer
      - description: Image Storage Key
        in: path
        name: imageSK
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Removes an image from the specified album.
      tags:
      - Albums
    post:
      consumes:
      - application/json
      description: Adds an image with imageID to an album with albumID
      parameters:
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: integer
      - description: Image Storage Key
        in: path
        name: imageSK
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Add an image to an album
      tags:
      - Albums
  /albums/my:
    get:
      consumes:
      - application/json
      description: Retrieves all albums of the user by their ID.
      produces:
      - application/json
      responses: {}
      summary: Get user albums
      tags:
      - Albums
  /pictures/{imageURL}:
    delete:
      consumes:
      - application/json
      description: Delete an image for its url
      parameters:
      - description: Image url
        in: path
        name: imageURL
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an image
      tags:
      - Image
    get:
      consumes:
      - application/json
      description: This endpoint allows a user to download an image file.
      parameters:
      - description: StorageKey of the image
        in: path
        name: imageURL
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Download an image
      tags:
      - Image
  /pictures/create:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint allows a user to upload an image file.
      parameters:
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      - description: Image description
        in: formData
        name: desription
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Upload an image
      tags:
      - Image
  /pictures/my:
    get:
      consumes:
      - application/json
      description: This endpoint allows a user to download his images.
      produces:
      - application/json
      responses: {}
      summary: Download an image(s)
      tags:
      - Image
  /users/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in by providing their username
        and password. If the credentials are correct, a JWT token will be generated
        and returned in a cookie for session management.
      parameters:
      - description: User login credentials (username and password)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses: {}
      summary: Login an existing user
      tags:
      - User
  /users/logout:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log out by deleting the authentication
        cookie from the client's browser.
      produces:
      - application/json
      responses: {}
      summary: Log out a user (delete authentication cookie)
      tags:
      - User
  /users/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user, stores the user in the database,
        and generates a JWT token for the user.
      parameters:
      - description: User data for registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses: {}
      summary: Register a new user
      tags:
      - User
swagger: "2.0"
